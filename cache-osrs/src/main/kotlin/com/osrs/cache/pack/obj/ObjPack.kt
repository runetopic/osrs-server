package com.osrs.cache.pack.obj

import com.github.michaelbull.logging.InlineLogger
import com.google.inject.Inject
import com.osrs.cache.Js5Archive
import com.osrs.cache.Js5ConfigGroup
import com.osrs.cache.client.ClientCache
import com.osrs.cache.pack.PackFile
import com.osrs.config.ServerConfig
import io.netty.buffer.ByteBuf
import java.io.File
import java.io.PrintWriter
import me.tongfei.progressbar.ProgressBar
import me.tongfei.progressbar.ProgressBarBuilder
import org.openrs2.buffer.readString
import org.openrs2.buffer.use
import org.openrs2.cache.Cache

class ObjPack @Inject constructor(
    @ClientCache
    override val cache: Cache,
    private val serverConfig: ServerConfig
) : PackFile(
    cache = cache,
    fileName = "./application/data/src/scripts/_unpack/all.obj",
    archive = Js5Archive.CONFIG_INDEX,
    group = Js5ConfigGroup.OBJ_CONFIG,
) {
    private val logger = InlineLogger()

    private val Int.wearPosition: String
        get() = WEAR_POSITIONS[this] ?: error("Unhandled wear pos $this")

    override fun unpack() {
        createObjPack()
        createObjPackAll()
    }

    private fun createObjPack() {
        File("./application/data/pack/obj.pack").apply {
            printWriter().use { out ->
                for (id in 0 until capacity) out.println("$id=obj_${id}")
                out.close()
            }
        }
    }

    private fun createObjPackAll(): File {
        logger.info { "Unpacking .objs" }

        val pb: ProgressBar = ProgressBarBuilder()
            .setInitialMax(capacity.toLong())
            .continuousUpdate()
            .setUnit(".objs", 1)
            .setMaxRenderedLength(200)
            .build()

        return File(fileName).apply {
            printWriter().use { out ->
                out.println("// GENERATED OBJ_PACK FOR ${serverConfig.build.major}.${serverConfig.build.minor} DO NOT EDIT THIS FiLE DIRECTLY.")

                for (id in 0 until capacity) {
                    try {
                        if (!cache.exists(archive, group, id)) {
                            logger.info { "[obj_${id}] does not exist. Skipping obj." }
                            return@use
                        }

                        cache.read(archive, group, id).use { buf ->
                            out.println("[obj_$id]")
                            pb.setExtraMessage("Unpacking $id.")

                            while (true) {
                                val code = buf.readUnsignedByte().toInt()
                                if (code == 0) {
                                    break
                                }

                                out.printCode(buf, code)
                            }
                        }


                    } catch (exception: Exception) {
                        out.println()
                        out.println("// COULD NOT GENERATE: [obj_$id] with the following exception: $exception")
                        logger.error(exception) { "COULD NOT GENERATE: [obj_$id] with the following exception:" }
                    } finally {
                        out.println()
                        pb.step()
                    }
                }

                out.println("// END OF OB_PACK_FILE")
                out.close()


            }
            pb.setExtraMessage("file: $absolutePath")
            pb.close()
        }
    }

    override fun PrintWriter.printCode(buf: ByteBuf, code: Int) {
        when (code) {
            ObjCodes.MODEL_CODE -> println("model=model_${buf.readUnsignedShort()}")
            ObjCodes.NAME_CODE -> println("name=${buf.readString()}")
            ObjCodes.DESC_CODE -> println("desc=${buf.readString()}")
            ObjCodes.ZOOM_2D_CODE -> println("zoom2d=${buf.readUnsignedShort()}")
            ObjCodes.XAN_2D_CODE -> println("xan2d=${buf.readUnsignedShort()}")
            ObjCodes.YAN_2D_CODE -> println("yan2d=${buf.readUnsignedShort()}")
            ObjCodes.OFFSET_X_2D_CODE -> println("2dxof=${buf.readUnsignedShort()}")
            ObjCodes.OFFSET_Y_2D_CODE -> println("2dyof=${buf.readUnsignedShort()}")
            ObjCodes.CODE_9 -> println("code9=yes")
            ObjCodes.CODE_10 -> println("code10=seq_${buf.readUnsignedShort()}")
            ObjCodes.STACKABLE_CODE -> println("stackable=yes")
            ObjCodes.COST_CODE -> println("cost=${buf.readInt()}")
            ObjCodes.WEAR_POS_CODE -> println("wearpos=${buf.readUnsignedByte().toInt().wearPosition}")
            ObjCodes.WEAR_POS_1_CODE -> println("wearpos1=${buf.readUnsignedByte().toInt().wearPosition}")
            ObjCodes.MEMBERS_CODE -> println("members=yes")
            ObjCodes.MALE_MODEL_CODE -> println("manwear=model_${buf.readUnsignedShort()},${buf.readUnsignedByte()}")
            ObjCodes.MALE_MODEL_1_CODE -> println("manwear2=model_${buf.readUnsignedShort()}")
            ObjCodes.FEMALE_MODEL_CODE -> println("womenwear=model_${buf.readUnsignedShort()},${buf.readUnsignedByte()}")
            ObjCodes.FEMALE_MODEL_1_CODE -> println("womenwear2=model_${buf.readUnsignedShort()}")
            ObjCodes.WEAR_POS_2_CODE -> println("wearpos2=${buf.readUnsignedByte().toInt().wearPosition}")
            in ObjCodes.OPS_CODES -> println("op${(code - ObjCodes.OPS_CODES.first) + 1}=${buf.readString()}")
            in ObjCodes.IOPS_CODES -> println("io${(code - ObjCodes.IOPS_CODES.first) + 1}=${buf.readString()}")
            ObjCodes.RECOLOR_CODE -> {
                val count = buf.readUnsignedByte()

                for (index in 0 until count) {
                    println("recol${index + 1}s=${buf.readUnsignedShort()}")
                    println("recol${index + 1}d=${buf.readUnsignedShort()}")
                }
            }

            ObjCodes.RETEXTURE_CODE -> {
                val count = buf.readUnsignedByte()

                for (index in 0 until count) {
                    println("retex${index + 1}s=${buf.readUnsignedShort()}")
                    println("retex${index + 1}d=${buf.readUnsignedShort()}")
                }
            }

            ObjCodes.SHIFT_CLICK_IOP_CODE -> println("shiftclickiop=${buf.readByte()}")
            ObjCodes.TRADEABLE -> println("tradeable=yes")
            ObjCodes.WEIGHT_CODE -> println("weight=${buf.readUnsignedShort()}")
            ObjCodes.MAN_WEAR_3_CODE -> println("manwear3=model_${buf.readUnsignedShort()}")
            ObjCodes.WOMEN_WEAR_3_CODE -> println("womenwear3=model_${buf.readUnsignedShort()}")
            ObjCodes.MAN_HEAD_CODE -> println("manhead=model_${buf.readUnsignedShort()}")
            ObjCodes.WOMEN_HEAD_CODE -> println("womenhead=model_${buf.readUnsignedShort()}")
            ObjCodes.MAN_HEAD_2_CODE -> println("manhead2=model_${buf.readUnsignedShort()}")
            ObjCodes.WOMEN_HEAD_2_CODE -> println("womenhead2=model_${buf.readUnsignedShort()}")
            ObjCodes.CATEGORY_CODE -> println("category=category_${buf.readUnsignedShort()}")
            ObjCodes.ZAN_2D_CODE -> println("2dzan=${buf.readUnsignedShort()}")
            ObjCodes.CERT_LINK_CODE -> println("certlink=obj_${buf.readUnsignedShort()}")
            ObjCodes.CERT_LINK_TEMPLATE_CODE -> println("certtemplate=obj_${buf.readUnsignedShort()}")
            in ObjCodes.COUNT_CODE -> println("count${code - 100 + 1}=obj_${buf.readUnsignedShort()},${buf.readUnsignedShort()}")
            ObjCodes.RESIZE_X_CODE -> println("resizex=${buf.readUnsignedShort()}")
            ObjCodes.RESIZE_Y_CODE -> println("resizey=${buf.readUnsignedShort()}")
            ObjCodes.RESIZE_Z_CODE -> println("resizez=${buf.readUnsignedShort()}")
            ObjCodes.AMBIENT_CODE -> println("ambient=${buf.readByte()}")
            ObjCodes.CONTRAST_CODE -> println("contrast=${buf.readByte() * 5}")
            ObjCodes.TEAM_CODE -> println("team=${buf.readUnsignedByte()}")
            ObjCodes.NOTE_CODE -> println("notelink=obj_${buf.readUnsignedShort()}")
            ObjCodes.NOTE_TEMPLATE_CODE -> println("notetemplate=obj_${buf.readUnsignedShort()}")
            ObjCodes.PLACEHOLDER_CODE -> println("placeholder=obj_${buf.readUnsignedShort()}")
            ObjCodes.PLACEHOLDER_TEMPATE_CODE -> {
                val placeholderTemplateId = buf.readUnsignedShort()

                if (placeholderTemplateId == PLACEHOLDER_ID) {
                    println("placeholder=yes")
                }
            }

            ObjCodes.PARAM_CODE -> {
                val size = buf.readUnsignedByte()

                for (index in 0 until size) {
                    val isString = buf.readBoolean()
                    val id = buf.readUnsignedMedium()

                    if (isString) {
                        println("param${index}=param_${id},${buf.readString()}")
                    } else {
                        println("param${index}_param_${id},${buf.readInt()}")
                    }
                }
            }

            else -> error("Error unrecognised .obj config code: $code")
        }
    }

    companion object {
        val WEAR_POSITIONS = mapOf(
            0 to "hat",
            1 to "back",
            2 to "front",
            3 to "righthand",
            4 to "torso",
            5 to "lefthand",
            6 to "arms",
            7 to "legs",
            8 to "head",
            9 to "hands",
            10 to "feet",
            11 to "jaw",
            12 to "ring",
            13 to "quiver"
        )

        const val PLACEHOLDER_ID = 14401

        object ObjCodes {
            const val MODEL_CODE = 1
            const val NAME_CODE = 2
            const val DESC_CODE = 3
            const val ZOOM_2D_CODE = 4
            const val XAN_2D_CODE = 5
            const val YAN_2D_CODE = 6
            const val OFFSET_X_2D_CODE = 7
            const val OFFSET_Y_2D_CODE = 8
            const val CODE_9 = 9
            const val CODE_10 = 10
            const val STACKABLE_CODE = 11
            const val COST_CODE = 12
            const val WEAR_POS_CODE = 13
            const val WEAR_POS_1_CODE = 14
            const val MEMBERS_CODE = 16
            const val MALE_MODEL_CODE = 23
            const val MALE_MODEL_1_CODE = 24
            const val FEMALE_MODEL_CODE = 25
            const val FEMALE_MODEL_1_CODE = 26
            const val WEAR_POS_2_CODE = 27
            val OPS_CODES = 30..34
            val IOPS_CODES = 35..39
            const val RECOLOR_CODE = 40
            const val RETEXTURE_CODE = 41
            const val SHIFT_CLICK_IOP_CODE = 42
            const val TRADEABLE = 65
            const val WEIGHT_CODE = 75
            const val MAN_WEAR_3_CODE = 78
            const val WOMEN_WEAR_3_CODE = 79
            const val MAN_HEAD_CODE = 90
            const val WOMEN_HEAD_CODE = 91
            const val MAN_HEAD_2_CODE = 92
            const val WOMEN_HEAD_2_CODE = 93
            const val CATEGORY_CODE = 94
            const val ZAN_2D_CODE = 95
            const val CERT_LINK_CODE = 97
            const val CERT_LINK_TEMPLATE_CODE = 98
            val COUNT_CODE = 100..109
            const val RESIZE_X_CODE = 110
            const val RESIZE_Y_CODE = 111
            const val RESIZE_Z_CODE = 112
            const val AMBIENT_CODE = 113
            const val CONTRAST_CODE = 114
            const val TEAM_CODE = 115
            const val NOTE_CODE = 139
            const val NOTE_TEMPLATE_CODE = 140
            const val PLACEHOLDER_CODE = 148
            const val PLACEHOLDER_TEMPATE_CODE = 149
            const val PARAM_CODE = 249
        }
    }
}
